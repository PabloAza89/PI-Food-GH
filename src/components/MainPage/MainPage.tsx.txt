import { useState, useEffect } from "react";
import { useSelector } from 'react-redux';
import { Route, Routes } from "react-router-dom";
import '../../styles/MainPage.css';
import { Box } from '@mui/material';
import Cards from "../Cards.jsx";
import Detail from "../Detail.jsx";
import Paginate from "../Paginate.jsx";
import Nav from "../Nav.jsx";
import Form from "../Form.jsx";
import About from "../About.jsx";
import toAvoidKey from '../../db/toAvoidKey.json';
import diets from '../../db/diets.json';

function MainPage() {

  //const value = useSelector((state) => state.addNew);
  //const english = useSelector((state: {english:boolean}) => state.english)
  const value = useSelector((state: {addNew:[]}) => state.addNew)

  interface parsedArrI {
    id?: any,
    title?: any,
    summary?: any,
    healthScore?: any,
    analyzedInstructions?: any,
    image?: any,
    diets?: any,
    dishTypes?: any,
  }  

  let parsedArr: parsedArrI[] = []

  async function BBB() {
    toAvoidKey.results.map(e => parsedArr.push(
      {
          id: e.id,
          title: e.title,
          summary: e.summary,
          healthScore: e.healthScore,
          analyzedInstructions:
              e.analyzedInstructions[0] ? e.analyzedInstructions[0].steps.map(e=> e.step) : [],
          image: e.image,
          diets: e.diets.map(function(e) {
              if ((e.indexOf(e) !== e.length - 1)) {
                  return e.split(" ").map(e => e[0].toUpperCase() + e.slice(1)).join(" ")
              } else return e.split(" ").map(e => e[0].toUpperCase() + e.slice(1)).join(" ")
              }),
          dishTypes: e.dishTypes
      }))
  }

  // useEffect(() => {
  //   toAvoidKey.results.map(e => parsedArr.push(
  //     {
  //         id: e.id,
  //         title: e.title,
  //         summary: e.summary,
  //         healthScore: e.healthScore,
  //         analyzedInstructions:
  //             e.analyzedInstructions[0] ? e.analyzedInstructions[0].steps.map(e=> e.step) : [],
  //         image: e.image,
  //         diets: e.diets.map(function(e) {
  //             if ((e.indexOf(e) !== e.length - 1)) {
  //                 return e.split(" ").map(e => e[0].toUpperCase() + e.slice(1)).join(" ")
  //             } else return e.split(" ").map(e => e[0].toUpperCase() + e.slice(1)).join(" ")
  //             }),
  //         dishTypes: e.dishTypes
  //     }))

  // },[parsedArr])  

  //BBB()


    

  const [isLoading, setIsLoading] = useState({
    main: true,
    refresh: false
  });

  function GetAfterCreated () {
    setIsLoading({ ...isLoading , refresh : true})

    if (isLoading) {
      setIsLoading({...isLoading , main: false})
    }
  }

  const [foods, setFoods] = useState<any>([]); // ALL MAIN FOODS
  const [diets, setDiets] = useState<any>([]); // ALL MAIN DIETS

  useEffect(() => {
    //setFoods((value).concat(parsedArr))
    setFoods([value, ...parsedArr])
    //setDiets(diets)
    setIsLoading({...isLoading, main :false})
    // eslint-disable-next-line react-hooks/exhaustive-deps
  //}, [isLoading, value]); // [] -> MEANS RUN ONCE !
}, []); // [] -> MEANS RUN ONCE !

  let dietsAndTitleFilter: any[] = [] // FIRST INSTANCE ARRAY TO FILTER: 1ยบ DIETS --> 2ยบ TITLE
  let toShow: any[] = [] // ARRAY SORTED BY HEALTH LEVEL OR A-Z TO SHOW

  const [dietName, setDietName] = useState({
    name: "All Diets", // FIRST INSTANCE DEFAULT VALUE
  });

  const [titleMatch, setTitleMatch] = useState({
    name: "",
  });

  const [healthLevel , setHealthLevel] = useState({ // HEALTH LEVEL SELECTED
    name: "More Healthy", // FIRST INSTANCE DEFAULT VALUE
    selected: false //
  });

  const [sortName , setSortName] = useState({ // SORT NAME SELECTED
    name: "A-Z",
    selected: false
  });

  function onFilterID(foodId:any) {
    let food = foods.filter((c:any) => parseInt(foodId).toString() === foodId.toString() ? c.id === parseInt(foodId) : c.id === foodId);
    return food[0]
  }

  const handleDietNameChange = (dietName:any) => {
    setDietName({name: dietName});
  }

  const handleTitleMatchChange = (titleMatch:any) => {
    setTitleMatch({name: titleMatch});
  }

  const handleHealthLevelChange = (healthLevel:any) => {
    setHealthLevel({name: healthLevel, selected: true});
    setSortName({name: "", selected: false});
  }

  const handleSortNameChange = (sortName:any) => {
    setHealthLevel({name: "", selected: false});
    setSortName({name: sortName, selected: true});
  }

  function onDietAndTitleFilter() {
    if (dietName.name === "All Diets") {
      if (titleMatch.name === "") {
        dietsAndTitleFilter =  foods
      } else {
        let qq = foods.filter((e:any) => e.title.toLowerCase().includes(titleMatch.name.toLowerCase()))
        dietsAndTitleFilter = qq
      }
    } else {
      if (titleMatch.name === "") {
        let qq = foods.filter((e:any) => e.diets.includes(dietName.name))
        dietsAndTitleFilter = qq
      } else {
        let qq = foods.filter((e:any) => e.diets.includes(dietName.name))
        let ww = qq.filter((e:any) => e.title.toLowerCase().includes(titleMatch.name.toLowerCase()))
        dietsAndTitleFilter = ww
      }
    }
  }

  function onHealthLevelFilter() {
    if (healthLevel.name === "-- select an option --" && healthLevel.selected === false) {
      let qq = dietsAndTitleFilter.sort((a,b) => b.healthScore - a.healthScore);
      toShow = qq
    }
    if (healthLevel.name === "More Healthy" && healthLevel.selected === false) {
      let qq = dietsAndTitleFilter.sort((a,b) => b.healthScore - a.healthScore);
      toShow = qq
    }
      if (healthLevel.name === "More Healthy" && healthLevel.selected === true) {
        let qq = dietsAndTitleFilter.sort((a,b) => b.healthScore - a.healthScore);
        toShow = qq
      }
      if (healthLevel.name === "Less Healthy" && healthLevel.selected === true) {
        let qq = dietsAndTitleFilter.sort((a,b) => a.healthScore - b.healthScore);
        toShow = qq
      }
  }

  function onSortNameFilter() {
    if (sortName.name === "A-Z" && sortName.selected === true) {
      let qq = dietsAndTitleFilter.sort((a, b) => a.title.localeCompare(b.title))
      toShow = qq
    }

    if (sortName.name === "Z-A" && sortName.selected === true) {
      let qq = dietsAndTitleFilter.sort((a, b) => b.title.localeCompare(a.title))
      toShow = qq
    }
  }

  // Promise.all([onDietAndTitleFilter()])
  // .then(() => onHealthLevelFilter())
  // .then(() => onSortNameFilter())

  BBB()
  console.log("este", parsedArr)
  
 // console.log("este", toAvoidKey)

/*   return isLoading.main ?
    (<div className="loading">Loading...</div>) :
    (
      <div className='mainPage'>
        {<Route exact path="/PI-Food-GH" render={ () => (<Nav diets={diets}
          foods={foods}
          handleDietNameChange={handleDietNameChange} handleHealthLevelChange={handleHealthLevelChange}
          handleSortNameChange={handleSortNameChange} handleTitleMatchChange={handleTitleMatchChange}  />)}
        />}
        <Route exact path="/PI-Food-GH" render={ () => (<Paginate />)} />
        <Route exact path="/PI-Food-GH" render={ () => (<Cards toShow={toShow}  />) } />
        <Route exact path="/PI-Food-GH/:foodId" render={() => (<Detail onFilterID={onFilterID} />)}/>
        <Route exact path="/PI-Food-GH/create" render={() => (<Form GetAfterCreated={GetAfterCreated} />)}/>
        <Route exact path="/PI-Food-GH/about" render={ () => (<About />)} />
      </div>
    ) */
/* 
    return (
      <div className='mainPage'>
        {<Route exact path="/PI-Food-GH" render={ () => (<Nav diets={diets}
          foods={foods}
          handleDietNameChange={handleDietNameChange} handleHealthLevelChange={handleHealthLevelChange}
          handleSortNameChange={handleSortNameChange} handleTitleMatchChange={handleTitleMatchChange}  />)}
        />}
        <Route exact path="/PI-Food-GH" render={ () => (<Paginate />)} />
        <Route exact path="/PI-Food-GH" render={ () => (<Cards toShow={toShow}  />) } />
        <Route exact path="/PI-Food-GH/:foodId" render={() => (<Detail onFilterID={onFilterID} />)}/>
        <Route exact path="/PI-Food-GH/create" render={() => (<Form GetAfterCreated={GetAfterCreated} />)}/>
        <Route exact path="/PI-Food-GH/about" render={ () => (<About />)} />
      </div>
    ) */

    
    // ALL DIETS
    // "All Diets"
    // "Gluten Free"
    // "Ketogenic"
    // "Vegan"
    // "Lacto Ovo Vegetarian"
    // "Pescatarian"
    // "Paleolithic"
    // "Primal"
    // "Fodmap Friendly"
    // "Whole 30"
    // "Dairy Free"
      

    return (
      <Box className='mainPage'>
        <Routes>
          <Route path="/" element={<>
            <Nav
              diets={diets}
              foods={foods}
              handleDietNameChange={handleDietNameChange}
              handleHealthLevelChange={handleHealthLevelChange}
              handleSortNameChange={handleSortNameChange}
              handleTitleMatchChange={handleTitleMatchChange}
            />
            <Paginate />
            <Cards toShow={parsedArr}  />
          </>}/>
          <Route path="/:foodId" element={<>
            <Detail onFilterID={onFilterID} />
          </>}/>
          <Route path="/create" element={<>
            <Form GetAfterCreated={GetAfterCreated} />
          </>}/>
          <Route path="/about" element={<>
            <About />
          </>}/>
        </Routes>
      </Box>
    )
}

export default MainPage;
